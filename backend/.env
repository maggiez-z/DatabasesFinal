API_PORT=8000
ORIGIN=http://localhost:4200
DB_PATH=./databases/spartan_dining_guide.db
CREATE_USER_SQL=CREATE TABLE IF NOT EXISTS User(user_id INTEGER(10000), user_name VARCHAR(20) NOT NULL, email VARCHAR(30), password VARCHAR(30), address VARCHAR(30), phone_number CHAR(10), favorite_food VARCHAR(20), PRIMARY KEY(user_id));
CREATE_REST_SQL=CREATE TABLE IF NOT EXISTS Restaurant(restaurant_id CHAR(6), restaurant_name VARCHAR(20) NOT NULL, area VARCHAR(15), address VARCHAR(30), chef VARCHAR(20), capacity INTEGER, phone_number CHAR(10), website HYPERLINK, cuisine CHAR(10), Monday_From CHAR(4), Monday_To CHAR(4), Tuesday_From CHAR(4), Tuesday_To CHAR(4), Wednesday_From CHAR(4), Wednesday_To CHAR(4), Thursday_From CHAR(4), Thursday_To CHAR(4), Friday_From CHAR(4), Friday_To CHAR(4), Saturday_From CHAR(4), Saturday_To CHAR(4), Sunday_From CHAR(4), Sunday_To CHAR(4), PRIMARY KEY(restaurant_id));
CREATE_MENU_SQL=CREATE TABLE IF NOT EXISTS Menu(menu_id CHAR(6), type VARCHAR(15), PRIMARY KEY(menu_id));
CREATE_DISH_SQL=CREATE TABLE IF NOT EXISTS Dish(dish_id CHAR(6), dish_name VARCHAR(30) NOT NULL, ingredients VARCHAR(100), calories INTEGER, price INTEGER, PRIMARY KEY(dish_id));
CREATE_WRITE_RATE_SQL=CREATE TABLE IF NOT EXISTS Write_rating(user_id INTEGER(10000), rating_id INTEGER(10000), comfortability INTEGER(5) NOT NULL, food_quality INTEGER(5) NOT NULL, service INTEGER(5) NOT NULL, cleanliness INTEGER(5) NOT NULL, comment VARCHAR(200), PRIMARY KEY(user_id, rating_id), FOREIGN KEY(user_id) REFERENCES User);
CREATE_PARKING_SQL=CREATE TABLE IF NOT EXISTS Parking(parking_id CHAR(6), parking_address VARCHAR(30), total_capacity INTEGER, handicap_capacity INTEGER, cost INTEGER, PRIMARY KEY(parking_id));
CREATE_ASK_QUESTION_SQL=CREATE TABLE IF NOT EXISTS Ask_question(user_id INTEGER(10000), question_id INTEGER(10000), question VARCHAR(100) NOT NULL, time_asked VARCHAR(200) NOT NULL, PRIMARY KEY(user_id, question_id), FOREIGN KEY(user_id) REFERENCES User);
CREATE_GIVE_ANSWER_SQL=CREATE TABLE IF NOT EXISTS Give_answer(user_id INTEGER(10000), answer_id INTEGER(10000), answer VARCHAR(200) NOT NULL, time_answered VARCHAR(200) NOT NULL, PRIMARY KEY(user_id, answer_id, time_answered), FOREIGN KEY(user_id) REFERENCES User);
CREATE_HAS_MENU_SQL=CREATE TABLE IF NOT EXISTS Has_menu(restaurant_id CHAR(6), menu_id CHAR(6), PRIMARY KEY(restaurant_id, menu_id), FOREIGN KEY(restaurant_id) REFERENCES Restaurant, FOREIGN KEY(menu_id) REFERENCES Menu);
CREATE_HAS_DISH_SQL=CREATE TABLE IF NOT EXISTS Has_dish(menu_id CHAR(6), dish_id CHAR(6), PRIMARY KEY(menu_id, dish_id), FOREIGN KEY(dish_id) REFERENCES Dish, FOREIGN KEY(menu_id) REFERENCES Menu);
CREATE_HAS_PARKING_SQL=CREATE TABLE IF NOT EXISTS Has_parking(restaurant_id CHAR(6), parking_id CHAR(6), PRIMARY KEY(restaurant_id, parking_id), FOREIGN KEY(restaurant_id) REFERENCES Restaurant, FOREIGN KEY(parking_id) REFERENCES Parking);
CREATE_RATE_REST_SQL=CREATE TABLE IF NOT EXISTS Rating_restaurant(user_id INTEGER(10000), rating_id INTEGER(10000), restaurant_id CHAR(6), PRIMARY KEY(user_id, rating_id), FOREIGN KEY(user_id) REFERENCES User, FOREIGN KEY(rating_id) REFERENCES Write_rating);
CREATE_REST_QUESTION_SQL=CREATE TABLE IF NOT EXISTS Restaurant_question(user_id INTEGER(10000), question_id CHAR(6), restaurant_id CHAR(6), PRIMARY KEY(question_id, user_id), FOREIGN KEY(user_id, question_id) REFERENCES Ask_question, FOREIGN KEY(restaurant_id) REFERENCES Restaurant);
CREATE_HAS_ANSWER_SQL=CREATE TABLE IF NOT EXISTS Has_answer(user_id INTEGER(10000), answer_id INTEGER(10000), question_id INTEGER(10000), PRIMARY KEY(user_id, answer_id), FOREIGN KEY (user_id, answer_id) REFERENCES Give_answer, FOREIGN KEY(question_id) REFERENCES Ask_question);